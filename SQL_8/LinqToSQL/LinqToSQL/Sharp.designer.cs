#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqToSQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SongDB")]
	public partial class SharpDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSongDB(SongDB instance);
    partial void UpdateSongDB(SongDB instance);
    partial void DeleteSongDB(SongDB instance);
    #endregion
		
		public SharpDataContext() : 
				base(global::LinqToSQL.Properties.Settings.Default.SongDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SharpDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SharpDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SharpDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SharpDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SongDB> SongDBs
		{
			get
			{
				return this.GetTable<SongDB>();
			}
		}

        [Function(Name = "dbo.GetSongByMonth")]
        public ISingleResult<SongDB> SongByMonth([Parameter(DbType="int")] int month)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, (MethodInfo)(MethodInfo.GetCurrentMethod()), month);
            return ((ISingleResult<SongDB>)(result.ReturnValue));
        }
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SongDB")]
	public partial class SongDB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SongID;
		
		private string _SongTitle;
		
		private string _SongSinger;
		
		private System.DateTime _SongPublishedDate;
		
		private long _SongViewers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSongIDChanging(int value);
    partial void OnSongIDChanged();
    partial void OnSongTitleChanging(string value);
    partial void OnSongTitleChanged();
    partial void OnSongSingerChanging(string value);
    partial void OnSongSingerChanged();
    partial void OnSongPublishedDateChanging(System.DateTime value);
    partial void OnSongPublishedDateChanged();
    partial void OnSongViewersChanging(long value);
    partial void OnSongViewersChanged();
    #endregion
		
		public SongDB()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SongID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SongID
		{
			get
			{
				return this._SongID;
			}
			set
			{
				if ((this._SongID != value))
				{
					this.OnSongIDChanging(value);
					this.SendPropertyChanging();
					this._SongID = value;
					this.SendPropertyChanged("SongID");
					this.OnSongIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SongTitle", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string SongTitle
		{
			get
			{
				return this._SongTitle;
			}
			set
			{
				if ((this._SongTitle != value))
				{
					this.OnSongTitleChanging(value);
					this.SendPropertyChanging();
					this._SongTitle = value;
					this.SendPropertyChanged("SongTitle");
					this.OnSongTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SongSinger", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string SongSinger
		{
			get
			{
				return this._SongSinger;
			}
			set
			{
				if ((this._SongSinger != value))
				{
					this.OnSongSingerChanging(value);
					this.SendPropertyChanging();
					this._SongSinger = value;
					this.SendPropertyChanged("SongSinger");
					this.OnSongSingerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SongPublishedDate", DbType="DateTime NOT NULL")]
		public System.DateTime SongPublishedDate
		{
			get
			{
				return this._SongPublishedDate;
			}
			set
			{
				if ((this._SongPublishedDate != value))
				{
					this.OnSongPublishedDateChanging(value);
					this.SendPropertyChanging();
					this._SongPublishedDate = value;
					this.SendPropertyChanged("SongPublishedDate");
					this.OnSongPublishedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SongViewers", DbType="BigInt NOT NULL")]
		public long SongViewers
		{
			get
			{
				return this._SongViewers;
			}
			set
			{
				if ((this._SongViewers != value))
				{
					this.OnSongViewersChanging(value);
					this.SendPropertyChanging();
					this._SongViewers = value;
					this.SendPropertyChanged("SongViewers");
					this.OnSongViewersChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
